/*******************************************************************************************
  SIMPL+ Module Information
  (Fill in comments below)
*******************************************************************************************/
/*
Dealer Name:
System Name:
System Number:
Programmer:
Comments:
*/

/*******************************************************************************************
  Compiler Directives
  (Uncomment and declare compiler directives as needed)
*******************************************************************************************/
// #ENABLE_DYNAMIC
// #SYMBOL_NAME ""
// #HINT ""
// #DEFINE_CONSTANT
// #CATEGORY "" 
#CATEGORY "46" "KNX" // Custom
// #PRINT_TO_TRACE
// #DIGITAL_EXPAND 
// #ANALOG_SERIAL_EXPAND 
// #OUTPUT_SHIFT 
// #HELP_PDF_FILE ""
#DEFAULT_VOLATILE
#ENABLE_STACK_CHECKING
#ENABLE_TRACE
// #ENCODING_ASCII
// #ENCODING_UTF16
// #ENCODING_INHERIT_FROM_PARENT
// #ENCODING_INHERIT_FROM_PROGRAM

#HELP_BEGIN
   KNX_1Bit - gets the input data in the format xx/yy/zz:len:val
   and triggers on/off feedbacks if address matches
#HELP_END

/*******************************************************************************************
  DIGITAL, ANALOG and SERIAL INPUTS and OUTPUTS
  (Uncomment and declare inputs and outputs as needed)
*******************************************************************************************/
								DIGITAL_OUTPUT	_SKIP_;
								DIGITAL_OUTPUT	_SKIP_;
								ANALOG_OUTPUT 	Signed_Analog_Value[200,1];
STRING_INPUT 	FROM_RX$[64];	//DIGITAL_OUTPUT	_SKIP_;
//DIGITAL_INPUT	_SKIP_;

/*******************************************************************************************
  Parameters
  (Uncomment and declare parameters as needed)
*******************************************************************************************/
// INTEGER_PARAMETER
// SIGNED_INTEGER_PARAMETER
// LONG_INTEGER_PARAMETER
// SIGNED_LONG_INTEGER_PARAMETER
SIGNED_INTEGER_PARAMETER _SKIP_;
SIGNED_INTEGER_PARAMETER Mantissa;
STRING_PARAMETER GroupAddress[200,1][9];

/*******************************************************************************************
  Parameter Properties
  (Uncomment and declare parameter properties as needed)
*******************************************************************************************/
#BEGIN_PARAMETER_PROPERTIES GroupAddress
   propDefaultValue="";
#END_PARAMETER_PROPERTIES
#BEGIN_PARAMETER_PROPERTIES Mantissa
   propDefaultValue=1d;
#END_PARAMETER_PROPERTIES

STRING Prefix[200][14];
INTEGER PrefixLen[200];

INTEGER NumInputs;

signed_integer_function getVal(integer Value_2Byte)
{
	integer VZ, Exp, Man, C, S;
	long_integer lout;
	signed_integer siout;


	VZ = Value_2Byte >> 15;           // plus/minus sign
	Exp = (Value_2Byte >> 11) & 0x0F; // exponent
	Man = Value_2Byte & 0x7FF;        // mantissa
	if (VZ)	
	{
		Man = NOT (Man);		  // 1st complement wenn neg value
		Man = Man & 0x7FF;
	}

	Man = Man << Exp; 				// Exp times (<= 15)
	if (Mantissa = 1)
	{
		Man = (Man+5)/10;
	}
	if (Mantissa = 0)
	{
  		Man = (Man+49)/100; 
	}
	if (Mantissa >= 2)
	{	
  		Man = Man*10^(Mantissa-2);  
	}

  	lout = Man;  
  	//print("%ld\n",lout);

  	if(lout > 32767)
		lout = 32767;
  	if(VZ)
    	siout = lout * (-1);         
  	else
    	siout = lout;

  	return(siout);
}

CHANGE FROM_RX$
{
	integer Pos, i;
	STRING from_rx[64];

	from_rx = FROM_RX$;

	if( len(from_rx)<2 )
	return;

	for( i=1 to NumInputs step 1 )
	{	
		if( PrefixLen[i] > 0 )
		{
			if( len(from_rx) < PrefixLen[i]+4 )
				continue;
			pos = Find(Prefix[i],from_rx);
			if(pos = 1)
			{
				pos = HexToSI(mid(from_rx,PrefixLen[i]+1,4));	
				Signed_Analog_Value[i] = getVal(pos);
				break;
			}
		}
	}
}

/*******************************************************************************************
  Main()
  Uncomment and place one-time startup code here
  (This code will get called when the system starts up)
*******************************************************************************************/
Function Main()
{
    // TODO:  Add code here
    // Initialize declared global and local variables/arrays as needed.
	integer i;

	for(NumInputs = 200 to 1 Step -1)
		if(IsSignalDefined(Signed_Analog_Value[NumInputs]))
			Break;

    WaitForInitializationComplete();
	for(i = 1 to NumInputs Step 1)
	{
		if( GroupAddress[i] <> "" )
		{
			Prefix[i] = GroupAddress[i] + ":3:";
			PrefixLen[i] = len(Prefix[i]);
		}
		else
		{
			PrefixLen[i] = 0;
		}
	}
}

